// Project:	MU5
// Entity	Current Page Registers
// File:	cprs.hase
// Date:	June 2013

// Because memories are modelled as arrays of HASE types, it is not
// possible to mix instructions, integers (fixed-point numbers) and
// reals (floating-point numbers) in one array. However, in a paged 
// machine it is possible to allocate separate blocks of memory to 
// different types. This works well in the Atlas model because the
// fixed-point and floating-point numbers and code can be in separate
// areas of the virtual address space. In MU5, however, the address
// space is formally segmented into a segment for named variables
// (the Name Segment), segments for code and segments for array elements.
// In the Name Segment, fixed-point variables, floating-point variables
// and descriptors are intimately mixed together. Descriptors can be
// represented fairly simply as a pair of 32-bit variables, but for
// floating-point variables the choice is between representing them
// as the integer equivalents of their floating-point bit patterns
// (as in version 2 of the DLX model) and implementing the appropriate 
// conversions or simply confining the model to fixed-point variables.
// The latter option was chosen.
// The CPRs are preloaded such that
// Segment 0 (the Name Segment) is mapped to block 0 of the Local Store
// Segment 1 is used for instructions and is mapped to Block 1
// Segment 2 is used for array elements and is mapped to Block 2
// In the real MU5 the CPRs were manipulated by software but this is
// beyond the scope of this model.
// Users are of course at liberty to re-code the model to change this
// arrangement or to add more pages/blocks. 
 

$class_decls

//entity references

//structures and variables

  bool match;
  int i, cpr;
  int page, block;

  t_cpr_reg cpr_buffer;

//classes

int Translate(int page);
void SetIdle();

$class_defs

int cprs::Translate(int page)
{
  my_state = CPRS_BUSY;
  dump_state();
  match = false;
  for (i=0; i<4; i++)
   {
    cpr_buffer = V_addr_R_addr[i];
    if (page == cpr_buffer.Vaddress)
     {match = true;
       cpr = i;}
    }
  cpr_buffer = V_addr_R_addr[cpr];
  block = cpr_buffer.Raddress;
  return block;
 }

void cprs::SetIdle()
{
  my_state = CPRS_IDLE;
  dump_state();
}

$body

  my_state = CPRS_IDLE;
  dump_state();


